# Based on: https://github.com/ClementTsang/bottom/blob/master/.github/workflows/deployment.yml

name: Release

on:
  push:
    tags:
      - v*

env:
  CARGO_TERM_COLOR: always

jobs:
  publish-crate:
    name: Publish crate
    runs-on: ubuntu-latest
    needs: publish-github-release
    steps:
      - name: Clone
        uses: actions/checkout@v2
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.rustup
            humane/target
          key: ${{ runner.os }}-stable
      - name: Setup
        run: |
          rustup install stable
      - name: Get Version
        run: echo GIT_VERSION="$(git describe --tags | sed 's/^v\(.*\)$/\1/')" >> $GITHUB_ENV
      - name: Prepare Git
        run: |
          git config user.email "github@github.com"
          git config user.name "Github Actions"
          git checkout -b main
          # Use throw-away branch so we don't push the changes to origin
          git checkout -b deploy_branch
      - name: Prepare Crates
        run: |
          # Update cargo version, 
          node ./.backstage/version.cjs
          git add ./humane/Cargo.toml
          # Commit changes so cargo doesn't complain about dirty repo
          git commit -m "Deploy changes."

      - name: Build
        working-directory: ./humane
        run: cargo build --release --verbose
      - name: Publish
        working-directory: ./humane
        run: cargo publish --allow-dirty
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  publish-npm-package:
    name: Publish NPM package
    runs-on: ubuntu-latest
    needs: publish-github-release
    defaults:
      run:
        working-directory: ./wrappers/node
    steps:
      - name: Clone
        uses: actions/checkout@v2
      - uses: actions/download-artifact@v3
        with:
          name: release-checksums
          path: wrappers/node/checksums
      - name: Prepare package
        run: |
          RELEASE_VERSION=${GITHUB_REF#refs/tags/}
          npm version $(echo $RELEASE_VERSION | cut -c1-)
      - name: Publish
        run: npm publish
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-github-release:
    name: Publish to GitHub
    runs-on: ubuntu-latest
    needs: test-and-build
    steps:
      - name: Get Token
        id: get_workflow_token
        uses: peter-murray/workflow-application-token-action@v2
        with:
          application_id: ${{ secrets.CC_OSS_BOT_ID }}
          application_private_key: ${{ secrets.CC_OSS_BOT_PEM }}
      - name: Clone
        uses: actions/checkout@v2
        with:
          token: ${{ steps.get_workflow_token.outputs.token }}
      - name: Get Version
        run: echo GIT_VERSION="$(git describe --tags | sed 's/^v\(.*\)$/\1/')" >> $GITHUB_ENV
      - name: Swap to main
        uses: actions/checkout@v2
        with:
          ref: main
          token: ${{ steps.get_workflow_token.outputs.token }}
      - name: Download release binaries
        uses: actions/download-artifact@v3
        with:
          name: release
          path: build-artifacts
      - name: Build CHANGELOG
        run: |
          node ./.backstage/changelog.cjs write
          echo CHANGELOG=\"$(base64 -w 0 -i CHANGELOG.md)\" >> $GITHUB_ENV
          echo SHA=\"$( git rev-parse main:CHANGELOG.md )\" >> $GITHUB_ENV
      - name: Commit new CHANGELOG
        uses: octokit/request-action@v2.x
        id: push_changes
        with:
          route: PUT /repos/{owner}/{repo}/contents/CHANGELOG.md
          owner: cloudcannon
          repo: humane
          branch: main
          message: Changelog for ${{ env.GIT_VERSION }}
          sha: ${{ env.SHA }}
          content: ${{ env.CHANGELOG }}
        env:
          GITHUB_TOKEN: ${{ steps.get_workflow_token.outputs.token }}
      - name: Release documentation branch
        uses: octokit/request-action@v2.x
        id: merge_docs
        with:
          route: POST /repos/{owner}/{repo}/merges
          owner: cloudcannon
          repo: humane
          base: production-docs
          head: main
          commit_message: Release documentation for ${{ env.GIT_VERSION }}
        env:
          GITHUB_TOKEN: ${{ steps.get_workflow_token.outputs.token }}

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          body_path: RELEASE.md
          files: |
            build-artifacts/*
        env:
          GITHUB_TOKEN: ${{ steps.get_workflow_token.outputs.token }}

  test-and-build:
    name: Test packages and build all artifacts
    runs-on: ${{matrix.os}}
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        include:
          - build: windows
            os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
            cross: false
            run_tests: true
          - build: linux
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-musl
            cross: false
            run_tests: true
            musl: true
          - build: macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            cross: false
            run_tests: true
          - build: macos-m1
            os: macos-latest
            rust: stable
            target: aarch64-apple-darwin
            cross: false
            run_tests: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.rustup
            humane/target
          key: ${{ runner.os }}-${{ matrix.rust }}

      - uses: actions/setup-node@v3
        with:
          node-version: 16

      # From https://github.com/Emoun/duplicate/blob/master/.github/workflows/rust.yml
      - name: Get Version
        run: echo GIT_VERSION="$(git describe --tags | sed 's/^v\(.*\)$/\1/')" >> $GITHUB_ENV

      - name: Verify Changelog
        run: |
          node ./.backstage/changelog.cjs

      - name: Install Linker
        if: matrix.cross
        run: |
          sudo apt update
          sudo apt install ${{ matrix.linker }}

      - name: Install Tooling
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update -y
          sudo apt install -y musl-tools musl-dev clang gcc-aarch64-linux-gnu         
          echo "TARGET_CC=clang" >> $GITHUB_ENV
          echo "CFLAGS_aarch64_unknown_linux_musl=--sysroot=/usr/aarch64-linux-gnu" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=/usr/aarch64-linux-gnu/bin/ld" >> $GITHUB_ENV
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
            toolchain: ${{ matrix.rust }}
            target: ${{ matrix.target }}
            override: true
            default: true
            components: rustfmt, clippy

      - name: Install Chrome
        uses: browser-actions/setup-chrome@latest

      - name: Prepare Git
        run: |
          git config user.email "github@github.com"
          git config user.name "Github Actions"
          git checkout -b main
          # Use throw-away branch so we don't push the changes to origin
          git checkout -b deploy_branch
      - name: Prepare Crates
        run: |
          # Update cargo version
          node ./.backstage/version.cjs
          git add ./humane/Cargo.toml
          # Commit changes so cargo doesn't complain about dirty repo
          git commit -m "Deploy changes."

      - name: Build
        working-directory: ./humane
        run: RELEASE_VERSION=${GITHUB_REF#refs/tags/} cargo build --release --target ${{ matrix.target }}

      - name: Test Lib
        if: matrix.run_tests
        working-directory: ./humane
        run: cargo run --release --target ${{ matrix.target }}

      - name: Package Artifacts
        run: |
          src=$(pwd)
          stage=
          case $RUNNER_OS in
              Windows)
                  stage=$(mktemp -d)
                  ;;
              Linux)
                  stage=$(mktemp -d)
                  ;;
              macOS)
                  stage=$(mktemp -d -t tmp)
                  ;;
          esac
          cp humane/target/${{ matrix.target }}/release/humane $stage/
          cd $stage
          RELEASE_VERSION=${GITHUB_REF#refs/tags/}
          ASSET_NAME="humane-$RELEASE_VERSION-${{ matrix.target }}.tar.gz"
          ASSET_PATH="$src/$ASSET_NAME"
          CHECKSUM_PATH="$ASSET_PATH.sha256"
          tar czf $ASSET_PATH *
          cd $src
          case $RUNNER_OS in
              Windows)
                  sha256sum $ASSET_NAME > $CHECKSUM_PATH
                  ;;
              Linux)
                  sha256sum $ASSET_NAME > $CHECKSUM_PATH
                  ;;
              macOS)
                  shasum -a 256 $ASSET_NAME > $CHECKSUM_PATH
                  ;;
          esac
          if [ "$RUNNER_OS" == "Windows" ]; then
              ASSET_PATH=$(echo "$ASSET_PATH" | sed -e 's/^\///' -e 's/\//\\/g' -e 's/^./\0:/')
              CHECKSUM_PATH=$(echo "$CHECKSUM_PATH" | sed -e 's/^\///' -e 's/\//\\/g' -e 's/^./\0:/')
          fi
          echo "ASSET_PATH=$ASSET_PATH" >> $GITHUB_ENV
          echo "CHECKSUM_PATH=$CHECKSUM_PATH" >> $GITHUB_ENV
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release
          path: |
            ${{ env.ASSET_PATH }}
            ${{ env.CHECKSUM_PATH }}
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-checksums
          path: |
            ${{ env.CHECKSUM_PATH }}
